#!/usr/bin/env bash

#########################################################################
#                                                                       #
# vimarsha, Performance analysis: Machine Learning Approach             #
# Copyright (C) 2013 vimarsha                                           #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or     #
# (at your option) any later version.                                   #
#                                                                       #
# This program is distributed in the hope that it will be useful,       #
# but WITHOUT ANY WARRANTY; without even the implied warranty of        #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          #
# GNU General Public License for more details.                          #
#                                                                       #
# You should have received a copy of the GNU General Public License     #
# along with this program. If not, see <http://www.gnu.org/licenses/>.  #
#                                                                       #
#########################################################################

# Globla declarations
declare -A program_parent_dir
declare -A pkg_alias
declare -A default_events
GCC=gcc

function test_package_init {
    # Determine script name
    me=$(basename $0)

    # Try to autodetect path by looking at path used to invoke this script
    local uniquefile=".test_package_uniquefile"

    if [ "${0:0:1}" == "/" ]; then
        # Absolute path given
        test_package_base_dir=$(dirname $(dirname $0))
    else
        # Relative path given
        local script_absolute_path="$(pwd)/${0:1}"
        test_package_base_dir=$(dirname $(dirname $script_absolute_path))
    fi

    # Check if correct directory is detected
    if [ -f "${test_package_base_dir}/${uniquefile}" ]; then
            TEST_PACKAGE_BASE_DIR=${test_package_base_dir}
    fi

    # Make sure TEST_PACKAGE_BASE_DIR is defined and exported
    if [ -z "${TEST_PACKAGE_BASE_DIR}" ]; then
        echo "Error: Unable to autodetect path to the test package directory "
        exit 1
    fi
    export TEST_PACKAGE_BASE_DIR

    pkgdir=${test_package_base_dir}/pkgs

    pkg_alias[all]=""

    for i in $(ls -d ${pkgdir}/*/); do
        local pkg_name=$(basename $i)
        pkg_alias["$pkg_name"]=""

        if [ "$(ls -A $i)" ]; then
            for j in $(ls -d ${i}*/); do
                local program_name=$(basename $j)
                pkg_alias["$pkg_name"]="${pkg_alias[${pkg_name}]} $program_name"

                program_parent_dir["$program_name"]="$pkg_name"
            done
            pkg_alias["$pkg_name"]="${pkg_alias[${pkg_name}]:1}"

            if [ -z "${pkg_alias[all]}" ]; then
                pkg_alias[all]="${pkg_alias[${pkg_name}]}"
            else
                pkg_alias[all]="${pkg_alias[all]} ${pkg_alias[${pkg_name}]}"
            fi
        fi
    done

    configdir=${test_package_base_dir}/config
    event_config_file=${configdir}/events.cfg

    source $event_config_file

}

function check_program_alias_valid {
    program_names=""

    local prog_names=$(echo $1 | sed 's/,/ /g')

    for program_name in $prog_names; do
        if ! [[ ${pkg_alias[all]} =~ (^| )$program_name($| ) ||
                    ${!pkg_alias[@]} =~ (^| )$program_name($| ) ]]; then
            echo "Error: Wrong package name \"$program_name\""
            exit 1
        fi

        if [[ ${!pkg_alias[@]} =~ (^| )$program_name($| ) ]]; then
            program_names="$program_names ${pkg_alias[$program_name]}"
        else
            program_names="$program_names $program_name"
        fi
    done

    # remove duplicates from program list
    program_names=$(echo "$program_names" | xargs -n1 | awk ' !x[$0]++' | xargs)
}

function check_thread_list_valid {
    thread_list=""

    local tlist=$(echo $1 | sed 's/,/ /g')

    for num in $tlist; do
        if [[ $num =~ ^[0-9]+$ ]]; then
            thread_list="$thread_list $num"
        else
            echo "Thread number '$num' is invalid."
            exit 1
        fi
    done
}

function check_event_list_valid {
    event_list=$1
}

function check_perf_stream_valid {
    perf_out_stream=$1
}

function check_cpu_architecure_valid {
    local t_architecture_name="${1^^}"

    if ! [[ ${!default_events[@]} =~ (^| )$t_architecture_name($| )
                || $t_architecture_name == "OTHER" ]]; then
        echo -e "\nERROR: No default events for CPU Architecture '$t_architecture_name'"
        echo "$usage"
        exit 1
    fi

    processor_architecture=$t_architecture_name
}

function check_input_list_valid {
    input_list=$(echo $1 | sed 's/,/ /g')
}

function check_action_valid {
    t_action=$1

    if [[ "$t_action" == "default" || "$t_action" == "functional" ]]; then
        action=$t_action
    else
        echo "ERROR: Invalid action (${t_action})"
        echo "$usage"
        exit 1
    fi
}

function show_available_programs {
    echo "Programs for given package input:"
    for program in ${program_names}; do
        echo "  $program"
    done

    echo
    echo "Aliases available in the package:"
    for program_alias in ${!pkg_alias[@]}; do
        echo "  $program_alias"
    done

}

function read_program_input_types {
    local program_name=$1
    local program_dir=${pkgdir}/${program_parent_dir[$program_name]}/$program_name
    local program_conf_dir=$program_dir/conf
    program_input_types=""

    for i in $(ls ${program_conf_dir}/*.buildconf); do
        local input_name=$(basename $i | sed 's/.buildconf//')
        program_input_types="$program_input_types $input_name"
    done

}

function show_program_details {
    for program_name in $program_names; do

        if [[ ${!pkg_alias[@]} =~ (^| )$program_name($| ) ]]; then
            echo "Cannot show details for a package. Enter a program name"
        fi

        local program_dir=${pkgdir}/${program_parent_dir[$program_name]}/$program_name
        local program_conf_dir=$program_dir/conf
        local inputs=""

        echo "==================================================="
        echo "Details for Program \"$program_name\""
        echo

        echo "Input types supported:"
        for i in $(ls ${program_conf_dir}/*.buildconf); do
            local input_name=$(basename $i | sed 's/.buildconf//')
            inputs="$inputs $input_name"
            echo "  $input_name"
        done

        source ${program_conf_dir}/program.conf
        echo
        echo "Program versions available:"
        for i in ${program_types}; do
            echo "  $i"
        done

        echo
    done

}

function check_args_left {
    arg="$1"
    if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
        echo "$usage"
        exit 1
    fi
}

function process_args {

    # Usage
    usage="\
Usage $me -p PACKAGE [OPTIONS]...

Manage the perf data collection using test programs

Options:
  -p PACKAGE	- A list of packages or aliases on which the action is to
                  be performed.

  -l		- list all available programs

  -d		- show information for a given program or alias

  -n THREADS	- A list of thread numbers to be run with programs

  -e EVENTS     - List of events used with perf to collect data

  -a ACTION	- Data collections type

  -i INPUTS     - A list of input types

  -o OUTPUT	- Name of the output file

  -c CPU_ARCHITECTURE - processor architure used

  --perf-binary PERF_LOCATION - location of perf

  -s PERF_OUT_STREAM - perf output stream number

  -h		- Displays this help message.

Actions:
  default	- Normal perf data collection
  functional	- use function wise perf data collection

Processor Architectures (Default value - OTHER):
  INTEL_NEHALEM
  POWER7
  OTHER

Examples:
  $me -p all -n 1,2,4,8

  $me -p falseshare -n 1,2,4,8 -a functional

  $me -p swap -d

  $me -p swap -n 2,4 -e r04b8,r02b8"

# Default values used
program_names="${pkg_alias[all]}"
package_name="all"
thread_list="1"
input_list=""
event_list=""
action="default"
perf_exec=perf
output_filename="perf.out"
processor_architecture="OTHER"
perf_out_stream=""

show_help=""
show_list=""
show_details=""

while [[ ! -z "$1" ]]; do
    arg="$1"
    case "$arg" in
        "-h" )
            show_help=true
            ;;
        "-l" )
            show_list=true
            ;;
        "-d" )
            show_details=true
            ;;
        "-o" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            output_filename=$arg
            ;;
        "-a" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_action_valid $arg
            ;;
        "-n" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_thread_list_valid $arg
            ;;
        "-i" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_input_list_valid $arg
            ;;
        "-e" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_event_list_valid $arg
            ;;
        "-c" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_cpu_architecure_valid $arg
            ;;
        "-s" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_perf_stream_valid $arg
            ;;
        "-p" )
            shift; arg="$1"
            if [[ -z "$arg" ]] || [[ "$arg" =~ ^- ]]; then
                echo "$usage"
                exit 1
            fi

            check_program_alias_valid $arg
            ;;
        "--perf-binary")
            shift; arg="$1"
            check_args_left $arg

            if [ -f "$arg" ]; then
                perf_exec=$arg
            else
                echo "Error no file at $arg"
                exit 1
            fi
            ;;
        * )
            echo "$usage"
            exit 1
            ;;
    esac

    shift
done

}

function run_package {
    if [ $show_help ]; then
        echo "$usage"
        exit 1
    fi

    if [ $show_list ]; then
        show_available_programs
        exit 1
    fi

    if [ $show_details ]; then
        show_program_details
        exit 1
    fi

    # Load event list
    if [[ "$processor_architecture" == "OTHER" ]]; then
        if [[ -z "$event_list" ]]; then
            echo -e "\nERROR: Please enter some performance events or use -c CPU_ARCHITECTURE option\n"
            echo "$usage"
            exit 1
        fi
    else
        event_list=${default_events["$processor_architecture"]}
    fi

    # Check perf binary is valid
    which $perf_exec > /dev/null 2>&1
    if [ "$?" -gt 0 ]; then
        echo -e "ERROR: Perf location not detected\n"
        echo "$usage"
        exit 1
    fi

    test_package_build_dir=$TEST_PACKAGE_BASE_DIR/build
    if [ ! -d "$test_package_build_dir" ]; then
        mkdir -p $test_package_build_dir
    fi

    # Try to auto detect perf out stream if not specified
    if [ -z "$perf_out_stream" ]; then

        local temp_file=perf_test.out
        $perf_exec stat -e cycles dd if=/dev/zero of=/dev/null count=100 1> $temp_file 0>&2 2> /dev/null

        if [ -s $temp_file ]; then
            perf_out_stream=1
        else
            perf_out_stream=2
        fi
        rm $temp_file
    fi

    echo "Data collection started"
    echo -e "# Output file generated using $me \n#" > $output_filename

    if [ ! -z "$event_list" ]; then
        echo -e "# Events: $event_list\n" >> $output_filename
    fi


    # Run each program with given constraints
    for program_name in $program_names; do
        local program_dir=${pkgdir}/${program_parent_dir[$program_name]}/$program_name
        local program_build_dir=${test_package_build_dir}/$program_name
        local program_conf_dir=$program_dir/conf

        if [ ! -d $program_build_dir ]; then
            mkdir -p $program_build_dir
        fi

        # Copy src file to buid directory
        cp -r ${program_dir}/src/* $program_build_dir

        # Read program versions supported
        source $program_conf_dir/program.conf
        BUILDDIR=$program_build_dir

        # Preparing perf command
        if [[ $action == "default" ]]; then
            perf_with_options="$perf_exec stat -x:"
        elif [[ $action == "functional" ]]; then
            perf_with_options="$perf_exec record"
        fi

        if [ ! -z "$event_list" ]; then
            perf_with_options="${perf_with_options} -e $event_list"
        fi

        # Prepare input types
        read_program_input_types $program_name

        if [ ! -z "$input_list" ]; then
            filtered_input_list=""

            for input_t in $input_list; do
                for program_input_type in $program_input_types; do
                    if [ "$input_t" == "$program_input_type" ]; then
                        filtered_input_list="$filtered_input_list $input_t"
                    fi
                done
            done
        else
            filtered_input_list=$program_input_types
        fi

        for program_input_type in $filtered_input_list; do
            for thread_num in $thread_list; do
                NTHREADS=$thread_num
                for program_type in $program_types; do
                    PROGVER=$program_type
                    EXECNAME=${BUILDDIR}/${program_name}-${PROGVER}

                    source ${program_conf_dir}/${program_input_type}.buildconf

                    echo -e "\n# Program:${program_name},Threads:${thread_num},Type:${program_type},Input:${program_input_type}" >> $output_filename
                    $build_command

                    if [[ $action == "default" ]]; then
                        perf_command="$perf_with_options $exec_command $perf_out_stream>> $output_filename > /dev/null"
                        eval $perf_command
                    elif [[ $action == "functional" ]]; then
                        # perf_command="$perf_with_options $exec_command $perf_out_stream>&1 > /dev/null"
                        perf_command="$perf_with_options $exec_command > /dev/null $perf_out_stream>&1"
                        eval $perf_command
                        perf_command="$perf_exec report -t : >> $output_filename ${perf_out_stream}>&1"
                        eval $perf_command
                    fi
                done
            done
        done
    done

    echo "Data collection finished"
}

# Check Bash Version
if [ ${BASH_VERSINFO[0]} -lt 4 ]; then
  # We use certain Bash 4 features.
  echo "Warning: At least bash version 4 is recommended. Current version is $BASH_VERSION."
fi

test_package_init

process_args $@

run_package
